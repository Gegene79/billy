# 
# Docker compose para crear un front con 2 backend: elastic y un broker MQTT
#

version: "3.5"
services:

  ### elasticsearch backend
  elastic:
    image: billy-elastic
    container_name: billy-elastic
    build: ./elastic
    restart: always
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic:/usr/share/elasticsearch/data
    ports:
      - "${EL_PORT1}:9200"
      - "${EL_PORT2}:9300"
    networks: 
     - billy-network

  ### MQTT queue manager to receive sensor data
  mqtt:
    image: billy-mqtt
    container_name: billy-mqtt
    build: ./mqtt/
    restart: always
    volumes:
      - mqtt:/mosquitto/data/
    ports:
    - "${MQ_PORT}:1883"
    networks:
     - billy-network

  ### Node backend to serve API. Depends on elastic and MQTT
  node:
    image: billy-node
    container_name: billy-node
    build: ./node/
    restart: always
    depends_on:
      - mqtt
      - elastic
    ports:
      - "${NODE_PORT}:3000"
    networks:
     - billy-network

  ### nginx frontend with SSL enabled
  nginx:
    image: billy-nginx
    container_name: billy-nginx
    build: ./nginx/
    restart: always
    depends_on:
      - mqtt
      - elastic
      - node
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - images:/images/:ro
      - thumbs:/thumbnails/:ro
      - letsencrypt:/etc/letsencrypt
    environment:
      - NODE_HOST=${NODE_HOST}
      - DOMAIN=${DOMAIN}
      - EMAIL=${EMAIL}
    networks:
     - billy-network
  
  ### Jupyter to analyse data
  jupyter:
    image: billy-jupyter
    container_name: billy-jupyter
    build: ./jupyter
    restart: always
    depends_on:
     - elastic
    ports:
     - "${JUPYTER_PORT}:8888"
    volumes:
      - images:/images/:ro
      - jupyter:/home/jovyan/
      - thumbs:/thumbnails/
      - letsencrypt:/etc/letsencrypt:ro
    networks: 
     - billy-network

### Only one network to connect dockers
networks:
  billy-network:
    name: billy-network

### Bind volumes to persist data
volumes:
  images: 
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${IMAGE_DATA}"
  thumbs: 
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${THUMB_DATA}"
  elastic: 
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${EL_DATA}"
  mqtt:
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${MQ_DATA}"
  jupyter: 
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${JUPYTER_DATA}"
  letsencrypt: 
    driver: local
    driver_opts: 
      type: "none"
      o: "bind"
      device: "${NGINX_LETSENCRYPT}"
